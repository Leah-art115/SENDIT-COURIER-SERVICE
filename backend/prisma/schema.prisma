generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  phone            String
  password         String
  role             Role      @default(USER)
  resetToken       String?   // ✅ Add this for password reset
  resetTokenExpiry DateTime? // ✅ Add this for password reset
  createdAt        DateTime  @default(now())
}

model Parcel {
  id             String        @id @default(uuid())
  trackingId     String        @unique
  senderName     String
  senderEmail    String
  receiverName   String
  receiverEmail  String
  from           String
  to             String
  distance       Float
  fromLat        Float?         // ✅ Add this
  fromLng        Float?         // ✅ Add this
  destinationLat Float?         // ✅ Already here
  destinationLng Float?         // ✅ Already here
  type           ParcelType
  weight         Float
  mode           TransportMode
  description    String?
  price          Float
  status         ParcelStatus  @default(PENDING)
  sentAt         DateTime      @default(now())
  pickedAt       DateTime?
  deliveredAt    DateTime?

  driverId Int?
  driver   Driver? @relation(fields: [driverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statusHistory ParcelStatusLog[]
}


model ParcelStatusLog {
  id        String       @id @default(uuid())
  parcelId  String
  status    ParcelStatus
  updatedAt DateTime     @default(now())

  parcel Parcel @relation(fields: [parcelId], references: [id], onDelete: Cascade)
}

model Driver {
  id                    Int          @id @default(autoincrement())
  name                  String
  email                 String       @unique
  password              String
  mode                  CourierMode
  status                DriverStatus @default(AVAILABLE)
  canReceiveAssignments Boolean      @default(true)
  currentLat            Float? // ✅ Latest driver latitude
  currentLng            Float? // ✅ Latest driver longitude
  deletedAt             DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  parcels Parcel[] // reverse relation
}

enum Role {
  ADMIN
  USER
  DRIVER
}

enum ParcelType {
  BOXED_PACKAGE
  ENVELOPE
  BAG
  SUITCASE
}

enum TransportMode {
  STANDARD
  EXPRESS
}

enum ParcelStatus {
  PENDING
  ASSIGNED // ✅ When admin assigns to driver
  PICKED_UP_BY_DRIVER // ✅ Manually marked by driver
  IN_TRANSIT // ✅ Based on driver's live location
  DELIVERED // ✅ When driver reaches destination
  COLLECTED_BY_RECEIVER // ✅ Manually marked by user
  CANCELLED
}

enum CourierMode {
  BICYCLE
  SKATES
  MOTORCYCLE
  CAR
}

enum DriverStatus {
  AVAILABLE
  ON_DELIVERY
  OUT_SICK
  ON_LEAVE
  SUSPENDED
}