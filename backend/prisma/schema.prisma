generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  phone            String
  password         String
  role             Role      @default(USER)
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  sentParcels      Parcel[]  @relation("Sender")
  receivedParcels  Parcel[]  @relation("Receiver")
}

model Parcel {
  id             String        @id @default(uuid())
  trackingId     String        @unique
  senderId       Int?          // Changed to optional
  receiverId     Int?          // Changed to optional
  senderName     String
  senderEmail    String
  receiverName   String
  receiverEmail  String
  from           String
  to             String
  distance       Float
  fromLat        Float?
  fromLng        Float?
  destinationLat Float?
  destinationLng Float?
  type           ParcelType
  weight         Float
  mode           TransportMode
  description    String?
  price          Float
  status         ParcelStatus  @default(PENDING)
  sentAt         DateTime      @default(now())
  pickedAt       DateTime?
  deliveredAt    DateTime?
  driverId       Int?
  driver         Driver?       @relation(fields: [driverId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  statusHistory  ParcelStatusLog[]
  sender         User?         @relation("Sender", fields: [senderId], references: [id])
  receiver       User?         @relation("Receiver", fields: [receiverId], references: [id])
}

model ParcelStatusLog {
  id        String       @id @default(uuid())
  parcelId  String
  status    ParcelStatus
  updatedAt DateTime     @default(now())
  parcel    Parcel       @relation(fields: [parcelId], references: [id], onDelete: Cascade)
}

model Driver {
  id                    Int          @id @default(autoincrement())
  name                  String
  email                 String       @unique
  password              String
  mode                  CourierMode
  status                DriverStatus @default(AVAILABLE)
  canReceiveAssignments Boolean      @default(true)
  currentLat            Float?
  currentLng            Float?
  deletedAt             DateTime?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  parcels               Parcel[]
}

enum Role {
  ADMIN
  USER
  DRIVER
}

enum ParcelType {
  BOXED_PACKAGE
  ENVELOPE
  BAG
  SUITCASE
}

enum TransportMode {
  STANDARD
  EXPRESS
}

enum ParcelStatus {
  PENDING
  ASSIGNED
  PICKED_UP_BY_DRIVER
  IN_TRANSIT
  DELIVERED
  COLLECTED_BY_RECEIVER
  CANCELLED
}

enum CourierMode {
  BICYCLE
  SKATES
  MOTORCYCLE
  CAR
}

enum DriverStatus {
  AVAILABLE
  ON_DELIVERY
  OUT_SICK
  ON_LEAVE
  SUSPENDED
}